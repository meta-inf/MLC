(letrec ((f (fun (x) x))) (f 5)):


%macro	mov1 2
mov    r14, %2
mov    %1, r14
%endmacro

section .text

global	main
extern	printf, make_tuple

main:
mov	rbp, rsp
sub	rsp, 32
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 1], rax
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 2], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 2]
mov	rcx, fn21
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	r15, [rbp - 8 * 1]
mov	QWORD [rbp - 8 * 1], 5
mov1	[rbp - 8 * 2], [rbp - 8 * 3]
mov	rsp, rbp
jmp	fn15

_ml_term:
mov	rsp, rbp
mov	rax, 0
ret

fn21:
sub	rsp, 16
jmp	_ml_term

fn15:
sub	rsp, 16
mov	rax, [rbp - 8 * 2]
mov	r15, [rax + 8]
mov	r14, [rax + 16]
mov	rsp, rbp
jmp	r14


((fun (x) (fun (y) (tuple x y 2))) 3 5):


%macro	mov1 2
mov    r14, %2
mov    %1, r14
%endmacro

section .text

global	main
extern	printf, make_tuple

main:
mov	rbp, rsp
sub	rsp, 48
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 1], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 1]
mov	rcx, fn21
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	rdi, 2
mov	rsi, 0
mov	rdx, [rbp - 8 * 3]
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 2], rax
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 4], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 2]
mov	rcx, fn24
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 5], rax
mov	r15, [rbp - 8 * 4]
mov	QWORD [rbp - 8 * 1], 3
mov1	[rbp - 8 * 2], [rbp - 8 * 5]
mov	rsp, rbp
jmp	fn27

_ml_term:
mov	rsp, rbp
mov	rax, 0
ret

fn27:
sub	rsp, 32
mov	rdi, 2
mov	rsi, 0
mov	rdx, [rbp - 8 * 1]
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 3]
mov	rcx, fn30
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 4], rax
mov	rax, [rbp - 8 * 2]
mov1	[rbp - 8 * 1], [rbp - 8 * 4]
mov	r15, [rax + 8]
mov	r14, [rax + 16]
mov	rsp, rbp
jmp	r14

fn30:
sub	rsp, 32
mov	rdi, 3
mov	rsi, [r15 + 8 * 1]
mov	rdx, [rbp - 8 * 1]
mov	rcx, 2
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	rax, [rbp - 8 * 2]
mov1	[rbp - 8 * 1], [rbp - 8 * 3]
mov	r15, [rax + 8]
mov	r14, [rax + 16]
mov	rsp, rbp
jmp	r14

fn24:
sub	rsp, 16
mov	rax, [rbp - 8 * 1]
mov	QWORD [rbp - 8 * 1], 5
mov1	[rbp - 8 * 2], [r15 + 8 * 1]
mov	r15, [rax + 8]
mov	r14, [rax + 16]
mov	rsp, rbp
jmp	r14

fn21:
sub	rsp, 16
jmp	_ml_term


(letrec ((f (fun (x) (fun (y) (tuple (+ x 2) (+ y 3)))))) (f 2 3)):


%macro	mov1 2
mov    r14, %2
mov    %1, r14
%endmacro

section .text

global	main
extern	printf, make_tuple

main:
mov	rbp, rsp
sub	rsp, 48
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 1], rax
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 2], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 2]
mov	rcx, fn22
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 4], rax
mov	rdi, 2
mov	rsi, 0
mov	rdx, [rbp - 8 * 4]
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 3]
mov	rcx, fn25
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 5], rax
mov	r15, [rbp - 8 * 1]
mov	QWORD [rbp - 8 * 1], 2
mov1	[rbp - 8 * 2], [rbp - 8 * 5]
mov	rsp, rbp
jmp	fn15

_ml_term:
mov	rsp, rbp
mov	rax, 0
ret

fn25:
sub	rsp, 16
mov	rax, [rbp - 8 * 1]
mov	QWORD [rbp - 8 * 1], 3
mov1	[rbp - 8 * 2], [r15 + 8 * 1]
mov	r15, [rax + 8]
mov	r14, [rax + 16]
mov	rsp, rbp
jmp	r14

fn22:
sub	rsp, 16
jmp	_ml_term

fn15:
sub	rsp, 32
mov	rdi, 2
mov	rsi, 0
mov	rdx, [rbp - 8 * 1]
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 3]
mov	rcx, fn30
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 4], rax
mov	rax, [rbp - 8 * 2]
mov1	[rbp - 8 * 1], [rbp - 8 * 4]
mov	r15, [rax + 8]
mov	r14, [rax + 16]
mov	rsp, rbp
jmp	r14

fn30:
sub	rsp, 48
mov	rbx, [r15 + 8 * 1]
mov	rax, rbx
add	rax, 2
mov	rdx, [rbp - 8 * 1]
mov	rcx, rdx
add	rcx, 3
push	rax
push	rbx
push	rdx
push	rcx
mov	rdi, 2
mov	rsi, rax
mov	rdx, rcx
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 5], rax
pop	rcx
pop	rdx
pop	rbx
pop	rax
mov	rsi, [rbp - 8 * 2]
mov1	[rbp - 8 * 1], [rbp - 8 * 5]
mov	r15, [rsi + 8]
mov	r14, [rsi + 16]
mov	rsp, rbp
jmp	r14


(disp "Hello, world!"):


%macro	mov1 2
mov    r14, %2
mov    %1, r14
%endmacro
section .data

str0	db	0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x05, "Hello, world!", 0

section .text

global	main
extern	printf, make_tuple

main:
mov	rbp, rsp
sub	rsp, 16
mov	rdi, str0 + 8
xor	rax, rax
call	printf
mov	rax, rax
jmp	_ml_term

_ml_term:
mov	rsp, rbp
mov	rax, 0
ret


(letrec ((fact (fun (x) (cond ((== x 0) 1) (#t (* x (fact (- x 1)))))))) (dispi (fact 10))):


%macro	mov1 2
mov    r14, %2
mov    %1, r14
%endmacro

section .text

global	main
extern	printf, make_tuple

main:
mov	rbp, rsp
sub	rsp, 32
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 1], rax
mov	rdi, 1
mov	rsi, 0
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 2], rax
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 2]
mov	rcx, fn22
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 3], rax
mov	r15, [rbp - 8 * 1]
mov	QWORD [rbp - 8 * 1], 10
mov1	[rbp - 8 * 2], [rbp - 8 * 3]
mov	rsp, rbp
jmp	fn15

_ml_term:
mov	rsp, rbp
mov	rax, 0
ret

fn22:
sub	rsp, 16
mov	rax, [rbp - 8 * 1]
push	rax
mov	rdi, 1
mov	rsi, rax
xor	rax, rax
call	make_tuple
mov	rbx, rax
pop	rax
jmp	_ml_term

fn15:
sub	rsp, 48
mov	rbx, [rbp - 8 * 1]
cmp	rbx, 0
setz	al
movzx	rax, al
cmp	rax, 0
jz	cf1
mov	rcx, [rbp - 8 * 2]
mov	QWORD [rbp - 8 * 1], 1
mov	r15, [rcx + 8]
mov	r14, [rcx + 16]
mov	rsp, rbp
jmp	r14
cf1:
push	rax
push	rbx
mov	rdi, 3
mov	rsi, 0
mov	rdx, rbx
mov	rcx, [rbp - 8 * 2]
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 4], rax
pop	rbx
pop	rax
mov	rcx, rbx
sub	rcx, 1
push	rax
push	rcx
push	rbx
mov	rdi, 3
mov	rsi, 0
mov	rdx, [rbp - 8 * 4]
mov	rcx, fn30
xor	rax, rax
call	make_tuple
mov	[rbp - 8 * 6], rax
pop	rbx
pop	rcx
pop	rax
mov	[rbp - 8 * 1], rcx
mov1	[rbp - 8 * 2], [rbp - 8 * 6]
mov	rsp, rbp
jmp	fn15

fn30:
sub	rsp, 16
mov	rcx, [rbp - 8 * 1]
mov	rbx, [r15 + 8 * 1]
mov	rax, rbx
imul	rax, rcx
mov	rdx, [r15 + 8 * 2]
mov	[rbp - 8 * 1], rax
mov	r15, [rdx + 8]
mov	r14, [rdx + 16]
mov	rsp, rbp
jmp	r14


